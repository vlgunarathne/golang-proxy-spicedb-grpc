// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: resources/spicedb_proxy_service.proto

package spicedb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProxyServiceSpiceDB_SayHelloProxy_FullMethodName = "/viduranga.proxy.spicedb.ProxyServiceSpiceDB/SayHelloProxy"
)

// ProxyServiceSpiceDBClient is the client API for ProxyServiceSpiceDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceSpiceDBClient interface {
	SayHelloProxy(ctx context.Context, in *HelloProxyRequest, opts ...grpc.CallOption) (*HelloProxyReply, error)
}

type proxyServiceSpiceDBClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceSpiceDBClient(cc grpc.ClientConnInterface) ProxyServiceSpiceDBClient {
	return &proxyServiceSpiceDBClient{cc}
}

func (c *proxyServiceSpiceDBClient) SayHelloProxy(ctx context.Context, in *HelloProxyRequest, opts ...grpc.CallOption) (*HelloProxyReply, error) {
	out := new(HelloProxyReply)
	err := c.cc.Invoke(ctx, ProxyServiceSpiceDB_SayHelloProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceSpiceDBServer is the server API for ProxyServiceSpiceDB service.
// All implementations must embed UnimplementedProxyServiceSpiceDBServer
// for forward compatibility
type ProxyServiceSpiceDBServer interface {
	SayHelloProxy(context.Context, *HelloProxyRequest) (*HelloProxyReply, error)
	mustEmbedUnimplementedProxyServiceSpiceDBServer()
}

// UnimplementedProxyServiceSpiceDBServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServiceSpiceDBServer struct {
}

func (UnimplementedProxyServiceSpiceDBServer) SayHelloProxy(context.Context, *HelloProxyRequest) (*HelloProxyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloProxy not implemented")
}
func (UnimplementedProxyServiceSpiceDBServer) mustEmbedUnimplementedProxyServiceSpiceDBServer() {}

// UnsafeProxyServiceSpiceDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceSpiceDBServer will
// result in compilation errors.
type UnsafeProxyServiceSpiceDBServer interface {
	mustEmbedUnimplementedProxyServiceSpiceDBServer()
}

func RegisterProxyServiceSpiceDBServer(s grpc.ServiceRegistrar, srv ProxyServiceSpiceDBServer) {
	s.RegisterService(&ProxyServiceSpiceDB_ServiceDesc, srv)
}

func _ProxyServiceSpiceDB_SayHelloProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceSpiceDBServer).SayHelloProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyServiceSpiceDB_SayHelloProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceSpiceDBServer).SayHelloProxy(ctx, req.(*HelloProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyServiceSpiceDB_ServiceDesc is the grpc.ServiceDesc for ProxyServiceSpiceDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyServiceSpiceDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viduranga.proxy.spicedb.ProxyServiceSpiceDB",
	HandlerType: (*ProxyServiceSpiceDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloProxy",
			Handler:    _ProxyServiceSpiceDB_SayHelloProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resources/spicedb_proxy_service.proto",
}
